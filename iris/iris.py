import tensorflow as tf
import numpy as np

# Preparing training data (inputs-outputs)
features_for_training = [[6.4, 2.8, 5.6, 2.2],
                         [5.0, 2.3, 3.3, 1.0],
                         [4.9, 2.5, 4.5, 1.7],
                         [4.9, 3.1, 1.5, 0.1],
                         [5.7, 3.8, 1.7, 0.3],
                         [4.4, 3.2, 1.3, 0.2],
                         [5.4, 3.4, 1.5, 0.4],
                         [6.9, 3.1, 5.1, 2.3],
                         [6.7, 3.1, 4.4, 1.4],
                         [5.1, 3.7, 1.5, 0.4],
                         [5.2, 2.7, 3.9, 1.4],
                         [6.9, 3.1, 4.9, 1.5],
                         [5.8, 4.0, 1.2, 0.2],
                         [5.4, 3.9, 1.7, 0.4],
                         [7.7, 3.8, 6.7, 2.2],
                         [6.3, 3.3, 4.7, 1.6],
                         [6.8, 3.2, 5.9, 2.3],
                         [7.6, 3.0, 6.6, 2.1],
                         [6.4, 3.2, 5.3, 2.3],
                         [5.7, 4.4, 1.5, 0.4],
                         [6.7, 3.3, 5.7, 2.1],
                         [6.4, 2.8, 5.6, 2.1],
                         [5.4, 3.9, 1.3, 0.4],
                         [6.1, 2.6, 5.6, 1.4],
                         [7.2, 3.0, 5.8, 1.6],
                         [5.2, 3.5, 1.5, 0.2],
                         [5.8, 2.6, 4.0, 1.2],
                         [5.9, 3.0, 5.1, 1.8],
                         [5.4, 3.0, 4.5, 1.5],
                         [6.7, 3.0, 5.0, 1.7],
                         [6.3, 2.3, 4.4, 1.3],
                         [5.1, 2.5, 3.0, 1.1],
                         [6.4, 3.2, 4.5, 1.5],
                         [6.8, 3.0, 5.5, 2.1],
                         [6.2, 2.8, 4.8, 1.8],
                         [6.9, 3.2, 5.7, 2.3],
                         [6.5, 3.2, 5.1, 2.0],
                         [5.8, 2.8, 5.1, 2.4],
                         [5.1, 3.8, 1.5, 0.3],
                         [4.8, 3.0, 1.4, 0.3],
                         [7.9, 3.8, 6.4, 2.0],
                         [5.8, 2.7, 5.1, 1.9],
                         [6.7, 3.0, 5.2, 2.3],
                         [5.1, 3.8, 1.9, 0.4],
                         [4.7, 3.2, 1.6, 0.2],
                         [6.0, 2.2, 5.0, 1.5],
                         [4.8, 3.4, 1.6, 0.2],
                         [7.7, 2.6, 6.9, 2.3],
                         [4.6, 3.6, 1.0, 0.2],
                         [7.2, 3.2, 6.0, 1.8],
                         [5.0, 3.3, 1.4, 0.2],
                         [6.6, 3.0, 4.4, 1.4],
                         [6.1, 2.8, 4.0, 1.3],
                         [5.0, 3.2, 1.2, 0.2],
                         [7.0, 3.2, 4.7, 1.4],
                         [6.0, 3.0, 4.8, 1.8],
                         [7.4, 2.8, 6.1, 1.9],
                         [5.8, 2.7, 5.1, 1.9],
                         [6.2, 3.4, 5.4, 2.3],
                         [5.0, 2.0, 3.5, 1.0],
                         [5.6, 2.5, 3.9, 1.1],
                         [6.7, 3.1, 5.6, 2.4],
                         [6.3, 2.5, 5.0, 1.9],
                         [6.4, 3.1, 5.5, 1.8],
                         [6.2, 2.2, 4.5, 1.5],
                         [7.3, 2.9, 6.3, 1.8],
                         [4.4, 3.0, 1.3, 0.2],
                         [7.2, 3.6, 6.1, 2.5],
                         [6.5, 3.0, 5.5, 1.8],
                         [5.0, 3.4, 1.5, 0.2],
                         [4.7, 3.2, 1.3, 0.2],
                         [6.6, 2.9, 4.6, 1.3],
                         [5.5, 3.5, 1.3, 0.2],
                         [7.7, 3.0, 6.1, 2.3],
                         [6.1, 3.0, 4.9, 1.8],
                         [4.9, 3.1, 1.5, 0.1],
                         [5.5, 2.4, 3.8, 1.1],
                         [5.7, 2.9, 4.2, 1.3],
                         [6.0, 2.9, 4.5, 1.5],
                         [6.4, 2.7, 5.3, 1.9],
                         [5.4, 3.7, 1.5, 0.2],
                         [6.1, 2.9, 4.7, 1.4],
                         [6.5, 2.8, 4.6, 1.5],
                         [5.6, 2.7, 4.2, 1.3],
                         [6.3, 3.4, 5.6, 2.4],
                         [4.9, 3.1, 1.5, 0.1],
                         [6.8, 2.8, 4.8, 1.4],
                         [5.7, 2.8, 4.5, 1.3],
                         [6.0, 2.7, 5.1, 1.6],
                         [5.0, 3.5, 1.3, 0.3],
                         [6.5, 3.0, 5.2, 2.0],
                         [6.1, 2.8, 4.7, 1.2],
                         [5.1, 3.5, 1.4, 0.3],
                         [4.6, 3.1, 1.5, 0.2],
                         [6.5, 3.0, 5.8, 2.2],
                         [4.6, 3.4, 1.4, 0.3],
                         [4.6, 3.2, 1.4, 0.2],
                         [7.7, 2.8, 6.7, 2.0],
                         [5.9, 3.2, 4.8, 1.8],
                         [5.1, 3.8, 1.6, 0.2],
                         [4.9, 3.0, 1.4, 0.2],
                         [4.9, 2.4, 3.3, 1.0],
                         [4.5, 2.3, 1.3, 0.3],
                         [5.8, 2.7, 4.1, 1.0],
                         [5.0, 3.4, 1.6, 0.4],
                         [5.2, 3.4, 1.4, 0.2],
                         [5.3, 3.7, 1.5, 0.2],
                         [5.0, 3.6, 1.4, 0.2]
                         ]

labels_for_training = [[0, 0, 1],
                       [0, 1, 0],
                       [0, 0, 1],
                       [1, 0, 0],
                       [1, 0, 0],
                       [1, 0, 0],
                       [1, 0, 0],
                       [0, 0, 1],
                       [0, 1, 0],
                       [1, 0, 0],
                       [0, 1, 0],
                       [0, 1, 0],
                       [1, 0, 0],
                       [1, 0, 0],
                       [0, 0, 1],
                       [0, 1, 0],
                       [0, 0, 1],
                       [0, 0, 1],
                       [0, 0, 1],
                       [1, 0, 0],
                       [0, 0, 1],
                       [0, 0, 1],
                       [1, 0, 0],
                       [0, 0, 1],
                       [0, 0, 1],
                       [1, 0, 0],
                       [0, 1, 0],
                       [0, 0, 1],
                       [0, 1, 0],
                       [0, 1, 0],
                       [0, 1, 0],
                       [0, 1, 0],
                       [0, 1, 0],
                       [0, 0, 1],
                       [0, 0, 1],
                       [0, 0, 1],
                       [0, 0, 1],
                       [0, 0, 1],
                       [1, 0, 0],
                       [1, 0, 0],
                       [0, 0, 1],
                       [0, 0, 1],
                       [0, 0, 1],
                       [1, 0, 0],
                       [1, 0, 0],
                       [0, 0, 1],
                       [1, 0, 0],
                       [0, 0, 1],
                       [1, 0, 0],
                       [0, 0, 1],
                       [1, 0, 0],
                       [0, 1, 0],
                       [0, 1, 0],
                       [1, 0, 0],
                       [0, 1, 0],
                       [0, 0, 1],
                       [0, 0, 1],
                       [0, 0, 1],
                       [0, 0, 1],
                       [0, 1, 0],
                       [0, 1, 0],
                       [0, 0, 1],
                       [0, 0, 1],
                       [0, 0, 1],
                       [0, 1, 0],
                       [0, 0, 1],
                       [1, 0, 0],
                       [0, 0, 1],
                       [0, 0, 1],
                       [1, 0, 0],
                       [1, 0, 0],
                       [0, 1, 0],
                       [1, 0, 0],
                       [0, 0, 1],
                       [0, 0, 1],
                       [1, 0, 0],
                       [0, 1, 0],
                       [0, 1, 0],
                       [0, 1, 0],
                       [0, 0, 1],
                       [1, 0, 0],
                       [0, 1, 0],
                       [0, 1, 0],
                       [0, 1, 0],
                       [0, 0, 1],
                       [1, 0, 0],
                       [0, 1, 0],
                       [0, 1, 0],
                       [0, 1, 0],
                       [1, 0, 0],
                       [0, 0, 1],
                       [0, 1, 0],
                       [1, 0, 0],
                       [1, 0, 0],
                       [0, 0, 1],
                       [1, 0, 0],
                       [1, 0, 0],
                       [0, 0, 1],
                       [0, 1, 0],
                       [1, 0, 0],
                       [1, 0, 0],
                       [0, 1, 0],
                       [1, 0, 0],
                       [0, 1, 0],
                       [1, 0, 0],
                       [1, 0, 0],
                       [1, 0, 0],
                       [1, 0, 0]]

features_for_testing = [[5.6, 2.9, 3.6, 1.3],
                        [4.8, 3.1, 1.6, 0.2],
                        [6.3, 2.7, 4.9, 1.8],
                        [5.7, 2.8, 4.1, 1.3],
                        [5.0, 3.0, 1.6, 0.2],
                        [6.3, 3.3, 6.0, 2.5],
                        [5.0, 3.5, 1.6, 0.6],
                        [5.5, 2.6, 4.4, 1.2],
                        [5.7, 3.0, 4.2, 1.2],
                        [4.4, 2.9, 1.4, 0.2],
                        [4.8, 3.0, 1.4, 0.1],
                        [5.5, 2.4, 3.7, 1.0]
                        ]

labels_for_testing = [[0, 1, 0],
                      [1, 0, 0],
                      [0, 0, 1],
                      [0, 1, 0],
                      [1, 0, 0],
                      [0, 0, 1],
                      [1, 0, 0],
                      [0, 1, 0],
                      [0, 1, 0],
                      [1, 0, 0],
                      [1, 0, 0],
                      [0, 1, 0]
                      ]

inputs = tf.placeholder(shape=[None, 4],
                        dtype=tf.float32)
outputs = tf.placeholder(shape=[None, 3],
                         dtype=tf.float32)

# Preparing nn parameters (weights) using tf Variables
weights0 = tf.Variable(initial_value=tf.random_normal(shape=[4, 20]),
                       dtype=tf.float32)
weights1 = tf.Variable(initial_value=tf.random_normal(shape=[20, 3]),
                       dtype=tf.float32)

# Create layers
layer1_in = tf.matmul(inputs, weights0)
layer1_out = tf.nn.sigmoid(layer1_in)

layer_res_in = tf.matmul(layer1_out, weights1)
layer_res_out = tf.nn.sigmoid(layer_res_in)
# layer_res_out = tf.nn.relu(layer_res_in)

# Measuring the prediction error of the network after being trained
# error = tf.reduce_mean(outputs - layer_res_out)
error = tf.square(outputs - layer_res_out)

# Minimizing the prediction error using gradient descent optimizer
train_op = tf.train. \
    GradientDescentOptimizer(learning_rate=0.05). \
    minimize(error)


# Creating a tf Session
with tf.Session() as sess:
    # Initializing the tf Variables (weights and bias)
    sess.run(tf.global_variables_initializer())

    # Training loop of the neural network
    for step in range(10000):
        sess.run(fetches=[train_op, error],
                 feed_dict={inputs: features_for_training,
                            outputs: labels_for_training})

    # Testing
    tests = sess.run(fetches=layer_res_out,
                     feed_dict={inputs: features_for_testing})
    tests = np.array(tests).round()

    success = 0
    for i in range(len(labels_for_testing)):
        if np.array_equal(tests[i], labels_for_testing[i]):
            print(tests[i], '-', labels_for_testing[i], '+')
            success += 1
        else:
            print(tests[i], '-', labels_for_testing[i], '-')

    print('result:', success / len(labels_for_testing) * 100, '%')
